# Objective-C内存管理(1)——引用计数
作为一个程序员，所有的都逃不开内存管理，无论是C语言的malloc和free、java中的垃圾回收、还是Objective-C中的reference counting。

## 一些常用的内存管理方式

#### 1、C语言采用的malloc和free方式
##### &nbsp;&nbsp;1）malloc和free方式简介
- 内存的分配和释放完全有开发者管理，malloc用来分配内存，free用来释放内存
- 在内存使用之前必须调用malloc分配内存
- 在内存使用完成之后必须调用free来释放内存
- malloc和free必须一一对应

##### &nbsp;&nbsp;2）malloc和free方式的优势和劣势：
- 优势：开发者可以完全掌控内存管理，对内存使用极细致的优化
- 优势：比如内存的分配可以在真正需要使用之前，而不是在声明的地方
- 优势：不在使用的内存，可以第一时间释放，确保内存的使用效率
- 劣势：此种方式对开发者要求比较高，必须做到malloc和free的一一对应，否则极易产品内存使用问题
- 劣势：比如调用malloc之后，没有调用(没有及时调用)free来释放，导致内存泄漏或释放不及时
- 劣势：继续使用free之后的内存，导致数据丢失或者数据错乱
- 劣势：当内存块使用需要在多个函数之前传递是，如何保证及时准确的调用free，是一个极大的问题

#### 2、java的垃圾回收方式：
##### &nbsp;&nbsp;1）垃圾回收简介
- 垃圾回收是把内存管理和开发者完全隔离开来，让系统去管理内存，开发者专注于代码逻辑
- 开发者只需要在适当时候向系统请求内存(创建对象)，然后使用这块内存即可
- 内存的分配和释放交给系统去处理
- 系统会根据需要分配适当的内存，并通过一定的机制判断内存是否应该被释放

##### &nbsp;&nbsp;2）垃圾回收的优势和劣势
- 优势：把开发者从复杂的内存管理中解放出来，专注于业务逻辑实现
- 优势：一些内存优化要求不高的程序开发中，此种方式更加高效
- 优势：现在的垃圾回收系统已经优化的很好，内存问题也越来越少
- 劣势：开发者无法直接管理内存，无法对内存做细致的优化
- 劣势：垃圾回收系统本身是一个极其复杂的程序，运行垃圾回收系统会占用一定的资源，导致程序运行时可能出现性能问题
- 劣势：由于判断内存是否再使用，是一个极其复杂的问题，垃圾回收系统在处理此方面时，可能导致内存释放不及时或者内存泄漏等问题

以上粗略介绍了C语言的malloc和free方式、java的垃圾回收方式，让读者对内存管理有一些基本的认识，并可以用来与下面的引用计数进行对比。
如果读者对这两种内存管理方式有兴趣，可以在网上查找更多的资料详细了解。

## 引用计数(reference counting)
不同于C语言的malloc和free、java中的垃圾回收，Objective-C的对象采用了一种新的内存管理方式——引用计数。
什么是引用计数呢？

#### 什么是引用计数

#### Objective-C中引用计数的实现方式

#### 引用计数的优势和劣势

#### MRC和ARC简介
